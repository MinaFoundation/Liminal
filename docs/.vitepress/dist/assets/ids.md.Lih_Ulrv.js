import{_ as s,c as i,o as a,a8 as e}from"./chunks/framework.FpFchv4Q.js";const y=JSON.parse('{"title":"IDs","description":"","frontmatter":{"prev":{"text":"Effects","link":"/effects"},"next":{"text":"Composite Types","link":"/composite-types"}},"headers":[],"relativePath":"ids.md","filePath":"ids.md","lastUpdated":1718207870000}'),t={name:"ids.md"},n=e(`<h1 id="ids" tabindex="-1">IDs <a class="header-anchor" href="#ids" aria-label="Permalink to &quot;IDs&quot;">â€‹</a></h1><p>An <code>id</code> is a public key. It can be created from a <code>UInt8Array</code> of the public key&#39;s bytes.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UInt8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bytes]))</span></span></code></pre></div><p>Alternatively, there is a <code>fromHex</code> convenience method for creating an <code>id</code> from a hex-string representation of the public key bytes.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hexString)</span></span></code></pre></div><p>Any <code>id</code> can be used to create a <code>signer&lt;K&gt;</code>, which is a subtype of <code>id</code> with a <em>key</em> difference: the <code>id</code> subtype is associated with a property key, which can be communicated within the type system to enforce a signer requirement.</p><p>In the following example, we intend to deploy a contract at <code>contractId</code>. We&#39;ll need the ability to sign on behalf of that <code>id</code>. Let&#39;s ensure that the contract signer requirement is communicated within the deployment transaction type.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @errors: 2339</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contractId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CONTRACT_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">L</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> signer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> yield*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contractId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;contract&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    yield*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(namespace, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ...rest */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(senderSigner, {})</span></span></code></pre></div><p>To fix this error, supply the signer under the tx-specified key <code>&quot;contract&quot;</code>.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .tx(function*() { /* ... */ })</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- .sign(senderSigner, {})</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ .sign(senderSigner, {</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   contract: contractSigner,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ })</span></span></code></pre></div>`,10),h=[n];function p(l,k,d,r,c,o){return a(),i("div",null,h)}const E=s(t,[["render",p]]);export{y as __pageData,E as default};
