import{_ as e,c as a,o as t,a8 as i}from"./chunks/framework.FpFchv4Q.js";const f=JSON.parse('{"title":"Liminal Overview","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1718207870000}'),r={name:"index.md"},n=i('<h1 id="liminal-overview" tabindex="-1">Liminal Overview <a class="header-anchor" href="#liminal-overview" aria-label="Permalink to &quot;Liminal Overview&quot;">​</a></h1><p>Liminal is a WIP TypeScript library for authoring and interacting with zero-knowledge contracts on <a href="https://minaprotocol.com/" target="_blank" rel="noreferrer">Mina</a>. Liminal is currently a type-only mock of what we may ultimately want to implement. It still needs much feedback, including that from key stakeholders, such as <a href="https://www.o1labs.org/" target="_blank" rel="noreferrer">o1labs</a>.</p><p>In the long term, Liminal may also serve as a specification of capabilities supported in any given zero-knowledge smart contract. In this case, the Liminal AST would be a common representation against which builders could support a wide range of targets, such as block explorers, wallet transaction insights, persistent storage layers and even non-JS Liminal runtimes.</p><h2 id="why-does-liminal-exist" tabindex="-1">Why does Liminal Exist? <a class="header-anchor" href="#why-does-liminal-exist" aria-label="Permalink to &quot;Why does Liminal Exist?&quot;">​</a></h2><p>Although Mina&#39;s core cryptography is state of the art, it is quite difficult to integrate into programs of varying kinds. Ideally, one could easily draw on Mina to provide provability to the parts of their programs where provability would benefit end users. Simultaneously, tool and service builders are running into issues regarding representing, sharing and utilizing contract metadata for a wide range of use cases. Liminal takes––what is potentially––a first step towards addressing these issues with an end-to-end TypeScript developer experience.</p>',5),o=[n];function s(l,d,c,h,p,m){return t(),a("div",null,o)}const g=e(r,[["render",s]]);export{f as __pageData,g as default};
